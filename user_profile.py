import json
from typing import Dict, Optional
from pathlib import Path
import random
import string
import time
import os
import datetime

class UserProfile:
    def __init__(self, user_id: str):  
        self.user_id = user_id
        self.data = {
            'settings': {
                'language': 'en',  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                'model': 'gpt-4'
            },
            'messages_count': 0,
            'history': [],
            'registration_key': f'MLA-{user_id}',
            'is_registered': False
        }
        self.profiles_dir = Path('profiles')
        self.profiles_dir.mkdir(exist_ok=True)
        self.profile_path = self.profiles_dir / f'{user_id}.json'
        self.load_profile()

    def generate_registration_key(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        timestamp = str(int(time.time()))
        random_digits = ''.join(random.choices(string.digits, k=6))
        key = f"moon-{timestamp}-{random_digits}"
        self.data['registration_key'] = key
        self.save()
        return key

    def get_registration_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return self.data.get('registration_key')

    def load_profile(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.profile_path.exists():
            try:
                with open(self.profile_path, 'r', encoding='utf-8') as f:
                    saved_data = json.load(f)
                    
                    # –£–¥–∞–ª—è–µ–º 'id', –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    saved_data.pop('id', None)
                    
                    if 'settings' not in saved_data:
                        saved_data['settings'] = {}
                    if 'is_registered' not in saved_data:
                        saved_data['is_registered'] = False
                    if 'registration_key' not in saved_data:
                        saved_data['registration_key'] = None
                    if 'language' not in saved_data['settings']:
                        saved_data['settings']['language'] = None
                    if 'model' not in saved_data['settings']:
                        saved_data['settings']['model'] = 'gpt-4'
                    if 'history' not in saved_data:
                        saved_data['history'] = []
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                    from bot import AVAILABLE_MODELS
                    if saved_data['settings'].get('model') not in AVAILABLE_MODELS:
                        saved_data['settings']['model'] = 'gpt-4'
                    
                    self.data.update(saved_data)
            except Exception as e:
                print(f"Error loading profile: {e}")

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.profiles_dir.mkdir(exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
            with open(self.profile_path, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    def increment_messages(self) -> None:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.data['messages_count'] += 1
        self.save()

    def set_favorite_model(self, model: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏"""
        self.data['settings']['model'] = model  
        self.save()

    def update_settings(self, settings: Dict) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if 'settings' not in self.data:
            self.data['settings'] = {}
        self.data['settings'].update(settings)
        self.save()

    def is_registered(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
        return self.data['settings']['language'] is not None

    def get_language(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–ª–∏ 'ru' –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
        return self.data['settings'].get('language', 'ru')

    def set_language(self, language):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
        self.data['settings']['language'] = language
        self.save()

    def complete_registration(self, language: str) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.data['is_registered'] = True
        self.data['settings']['language'] = language
        self.save()

    def get_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:\n"
            f"‚îî –ö–ª—é—á: {self.data.get('registration_key', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
            f"‚îî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.data['messages_count']}\n"
            f"‚îî –ú–æ–¥–µ–ª—å: {self.data['settings'].get('model', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}\n"
            f"‚îî –Ø–∑—ã–∫: {self.data['settings'].get('language', 'ru')}"
        )

    def add_to_history(self, message, response):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.data['history'].append({
            'message': message,
            'response': response,
            'timestamp': str(datetime.datetime.now()),
            'model': self.data['settings'].get('model', 'gpt-4')
        })
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(self.data['history']) > 10:
            self.data['history'] = self.data['history'][-10:]
        self.save()

    def get_history(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return self.data.get('history', [])

    def initial_setup(self, language=None, model=None):
        """
        –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        :param language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'en')
        :param model: –ú–æ–¥–µ–ª—å AI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'gpt-4')
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∑—ã–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        if language and language in ['ru', 'en', 'es', 'de', 'fr']:
            self.data['settings']['language'] = language
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        from bot import AVAILABLE_MODELS
        if model and model in AVAILABLE_MODELS:
            self.data['settings']['model'] = model
        else:
            self.data['settings']['model'] = 'gpt-4'
        
        # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        self.data['is_registered'] = True
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not self.data.get('registration_key'):
            self.data['registration_key'] = f'MLA-{self.user_id}'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self.save()
        
        return self.data

    def save_profile(self):
        """–ê–ª–∏–∞—Å –¥–ª—è –º–µ—Ç–æ–¥–∞ save() –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        self.save()

class ProfileManager:
    _instances = {}

    def __init__(self, user_id: str):
        if user_id not in self._instances:
            self._instances[user_id] = UserProfile(user_id)
        self.data = self._instances[user_id].data
        self.profile = self._instances[user_id]

    def add_to_history(self, message, response):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.data['history'].append({
            'message': message,
            'response': response,
            'timestamp': datetime.datetime.now().isoformat()
        })
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 50 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        self.data['history'] = self.data['history'][-50:]
        self.profile.save()

    def save_profile(self):
        """–ê–ª–∏–∞—Å –¥–ª—è –º–µ—Ç–æ–¥–∞ save() –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        self.profile.save()

    def save(self):
        """–ê–ª–∏–∞—Å –¥–ª—è save() –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        self.profile.save()

    def get_registration_key(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        return self.data.get('registration_key', '')

    def initial_setup(self, language=None, model=None):
        """
        –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        :param language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'en')
        :param model: –ú–æ–¥–µ–ª—å AI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'gpt-4')
        """
        return self.profile.initial_setup(language, model)
